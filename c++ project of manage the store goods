#include <iostream>
#include <fstream>
#include <string>

using namespace std;
/*
The project is developed by:
Team leader: Muhammad ikrash    
1.      Muhammad raffey
2.      Muhammad salman
3.      SAAD KHALID
4.      Khizar Farooq
*/
//all  functions prototypes:  
void insertItem(string** shelves, int k, int p);
void displayItems(string** shelves, int k, int p);
void removeItem(string** shelves, int k, int p);
void removeAllItems(string** shelves, int k, int p); 
void getTotalItemsInShelf(string** shelves, int k, int p);
void getTotalItemsInAllShelves(string** shelves, int k, int p);
void findItem(string** shelves, int k, int p);
void updateItem(string** shelves, int k, int p);
void checkIfShelfEmpty(string** shelves, int k, int p);
void checkIfShelfFull(string** shelves, int k, int p);

int main() {
    int k, p;

    cout << "Enter no of shelves: ";
    cin >> k;
    cout << "Enter no of positions on each shelf: ";
    cin >> p;

    // Create a dynamic 2D array to represent shelves
    string** shelves = new string*[k];
    for (int i = 0; i < k; i++) {
        shelves[i] = new string[p];
        for (int j = 0; j < p; j++) {
            shelves[i][j] = "";
        }
    }

    int choice;
    ofstream outfile("store_items.txt", ios::app|ios::out); 

    do{
        cout << "********** Menu **********" << endl;
        cout << "Press 1 for Inserting an item." << endl;
        cout << "Press 2 for Displaying all items." << endl;
        cout << "Press 3 for Remove an item." << endl;
        cout << "Press 4 for Remove all the items." << endl;
        cout << "Press 5 for Return total no of items." << endl;
        cout << "Press 6 for find an item." << endl;
        cout << "Press 7 for updating an item." << endl;
        cout << "Press 8 to check if shelf is empty." << endl;
        cout << "Press 9 to check if shelf is full." << endl;
        cout << "Press 0 to exit." << endl;
       
        cout << "Enter Choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                insertItem(shelves, k, p);
                break;
            case 2:
                displayItems(shelves, k, p);
                break;
            case 3:
                removeItem(shelves, k, p);
                break;
            case 4:
                removeAllItems(shelves, k, p);
                break;
            case 5:
                getTotalItemsInShelf(shelves, k, p);
                break;
            case 6:
                findItem(shelves, k, p);
                break;
            case 7:
                updateItem(shelves, k, p);
                break;
            case 8:
                checkIfShelfEmpty(shelves, k, p);
                break;
            case 9:
                checkIfShelfFull(shelves, k, p);
                break;
            case 0:
                cout << "As you wish! " << endl;
                break;
            default:
                cout << "Invalid choice " << endl;
                cout<<"try again to done anything:\n";
                break;
        }

        cout << endl;

    } while (choice != 0);

    // by using file handling save all the items in the text file permanently:
    ofstream savefile("store_items.txt");
    if (savefile.is_open()) {
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < p; j++) {
                if (shelves[i][j] != "") {
                    savefile << shelves[i][j] << "  |  ";
                }
                
            }
            savefile << endl;
        }
        savefile.close();
    } else {
        cout << "Error saving items to file." << endl;
    }

    // Deallocate memory for the shelves
    for (int i = 0; i < k; i++) {
        delete[] shelves[i];
    }
    delete[] shelves;

    return 0;
}


void insertItem(string** shelves, int k, int p) {
  
    int shelfNo, position;
    string item;

    cout << "Enter Shelf: ";
    cin >> shelfNo;
    cout << "Enter Position: ";
    cin >> position;
    cout << "Enter Item: ";
    cin >> item;

    if (shelfNo >= 1 && shelfNo <= k && position >= 1 && position <= p) {
        if (shelves[shelfNo - 1][position - 1] == "") 
        {
            shelves[shelfNo - 1][position - 1] = item;
            cout << "the insert successfully: " << endl;
        }
         else
          {
            bool itemPlaced = false;
            for (int i = 0; i < p; i++) {
                if (shelves[shelfNo - 1][i] == "")
                 {
                    shelves[shelfNo - 1][i] = item;
                    cout << "Added successfully!" << endl;
                    itemPlaced = true;
                    break;
                }
            }
            if (itemPlaced==false) {
                cout << "Shelf " << shelfNo <<" and position "<<position<< " is full. Cannot insert item." << endl;
            }
        }
    } else {
        cout << "Invalid shelf or position." << endl;
    }
}

// Function to display all items in a shelf
void displayItems(string** shelves, int k, int p) {
    int shelfNo;

    cout << "Enter Shelf: ";
    cin >> shelfNo;

    if (shelfNo >= 1 && shelfNo <= k) 
    {
        cout << "Items in Shelf " << shelfNo << ":" << endl;
        for (int i = 0; i < p; i++)
         {
            if (shelves[shelfNo - 1][i] != "")

             {
                cout << "Position " << i + 1 << ": " << shelves[shelfNo - 1][i] << endl;
            }
        }
    } 
    else {
        cout << "there is no number of this shelf in store :\n";
    }
}

// Function to remove an item from a shelf
void removeItem(string** shelves, int k, int p) {
    int shelfNo, position;

    cout << "Enter shelf no to remove item: ";
    cin >> shelfNo;
    cout << "Enter position: ";
    cin >> position;

    if (shelfNo >= 1 && shelfNo <= k && position >= 1 && position <= p)
     {
        if (shelves[shelfNo - 1][position - 1] != "")
         {
            shelves[shelfNo - 1][position - 1] = "";
            cout << "Item removed" << endl;
        } else {
            cout << "No item found at the given  position." << endl;
        }
    } 
    else
     {
        cout << "there is no shelf and position in the store......" << endl;
    }
}

// Function to remove all items from a shelf
void removeAllItems(string** shelves, int k, int p) {
    int shelfNo;

    cout << "Enter shelf no: ";
    cin >> shelfNo;

    if (shelfNo >= 1 && shelfNo <= k) {
        for (int i = 0; i < p; i++) {
            shelves[shelfNo - 1][i] = "";
        }
        cout << "All items removed from Shelf " << shelfNo << "!" << endl;
    } else {
        cout << "Invalid shelf." << endl;
    }
}

// Function to return total number of items in a shelf
void getTotalItemsInShelf(string** shelves, int k, int p) {
    int shelfNo, itemCount = 0;

    cout << "Enter shelf no: ";
    cin >> shelfNo;

    if (shelfNo >= 1 && shelfNo <= k)
     {
        for (int i = 0; i < p; i++) 
        {

            if (shelves[shelfNo - 1][i] != "")
            {
                itemCount++;
            }
        }
        cout << "Total number of items in Shelf " << shelfNo << ": " << itemCount << endl;
    } 
    else 
    {
        cout << "Invalid shelf." << endl;
    }
}

// Function to return the total number of items in all shelves

void getTotalItemsInAllShelves(string** shelves, int k, int p)
 {
    int totalItems = 0;

    for (int i = 0; i < k; i++) 
    {
        for (int j = 0; j < p; j++)
         {
            if (shelves[i][j] != "")
            {
               
                totalItems++;
            }
        }
    }

    cout << "Total number of items in all shelves:  " << totalItems << endl;
}

// Function to find an item in the store and return the shelf number and position if it exists

void findItem(string** shelves, int k, int p)
 {
    string itemName;

    cout << "Enter item name to find: ";
    cin >> itemName;

    for (int i = 0; i < k; i++)
     {
        for (int j = 0; j < p; j++)
         {
            if (shelves[i][j] == itemName)
             {
                cout << "Item found at: Shelf " << i + 1 << " Position " << j + 1 << endl;
                return;
            }
        }
    }

    cout << "Item not found in the store." << endl;
}

// Function to update an item at a given position
void updateItem(string** shelves, int k, int p)
{
    int shelfNo, position;
    string newItem;

    cout << "Enter shelf no to update: ";
    cin >> shelfNo;
    cout << "Enter position: ";
    cin >> position;

    if (shelfNo >= 1 && shelfNo <= k && position >= 1 && position <= p) 
    {
        cout << "Enter item to update with: ";
        cin >> newItem;
        shelves[shelfNo - 1][position - 1] = newItem;
        cout << "Shelf updated!" << endl;
    } 
    else {
        cout << "Invalid shelf or position." << endl;
    }
}

// Function to check if a shelf is empty
void checkIfShelfEmpty(string** shelves, int k, int p) {
    int shelfNo;

    cout << "Enter shelf no: ";
    cin >> shelfNo;

    if (shelfNo >= 1 && shelfNo <= k) {
        bool isEmpty = true;
        for (int i = 0; i < p; i++) {
            if (shelves[shelfNo - 1][i] != "") {
                isEmpty = false;
                break;
            }
        }
        if (isEmpty) {
            cout << "Shelf " << shelfNo << " is empty." << endl;
        } else {
            cout << "Shelf " << shelfNo << " is not empty." << endl;
        }
    } else {
        cout << "Invalid shelf." << endl;
    }
}

// Function to check if a shelf is full
void checkIfShelfFull(string** shelves, int k, int p) {
    int shelfNo;

    cout << "Enter shelf no: ";
    cin >> shelfNo;

    if (shelfNo >= 1 && shelfNo <= k) {
        bool isFull = true;
        for (int i = 0; i < p; i++) {
            if (shelves[shelfNo - 1][i] == "") {
                isFull = false;
                break;
            }
        }
        if (isFull) {
            cout << "Shelf " << shelfNo << " is full." << endl;
        } else {
            cout << "Shelf " << shelfNo << " is not full." << endl;
        }
    } else {
        cout << "Invalid shelf." << endl;
    }
}
/*
                ...........The project have been Ended............
                          ...........Thank you.........
*/
